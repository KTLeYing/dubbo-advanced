server:
  port: 8003

dubbo:
  application:
    name: dubbo-provider #\u6CE8\u518C\u5728\u6CE8\u518C\u4E2D\u5FC3\u7684\u540D\u79F0\uFF0C\u552F\u4E00\u6807\u8BC6
  registry:
    address: zookeeper://127.0.0.1:2181
    protocol: zookeeper #\u9ED8\u8BA4\u540D\u79F0\uFF0C\u52FF\u4FEE\u6539
    check: false
  protocol:
    name: dubbo #\u9ED8\u8BA4\u540D\u79F0\uFF0C\u52FF\u4FEE\u6539
    port: "20886"  #dubbo\u670D\u52A1\u66B4\u9732\u7684\u7AEF\u53E3\uFF0C\u4E00\u5B9A\u8981\u6709\u53CC\u5F15\u53F7\uFF0C\u4E0D\u7136\u62A5\u9519
  monitor:
    protocol: register #\u9ED8\u8BA4\u540D\u79F0\uFF0C\u52FF\u4FEE\u6539
  consumer:
    check: false
    timeout: 3000
  scan: com.mzl.dubboprovider.service.impl #\u626B\u63CF\u7684\u5305\u540D

spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: 105293
    url: jdbc:mysql://localhost:3306/dubbo-advanced?useUnicode=true&characterEncoding=utf-8&serverTimezone=UTC
  kafka:
    bootstrap-servers: localhost:9092 #192.168.211.130:9092,192.168.211.130:9093,192.168.211.130:9094
    producer:  #生产者
      # 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
      # 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
      retries: 0
      # 每次批量发送消息的数量,produce积累到一定数据，一次发送
      batch-size: 16384
      # produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
      buffer-memory: 33554432
      #procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
      #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
      #可以设置的值为：all, -1, 0, 1
      acks: 1
      # 指定消息key和消息体的序列化编解码方式
      key-serializer: org.apache.kafka.common.serialization.IntegerSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:  #消费者
      # 指定默认消费者group id --> 由于在kafka中，同一组中的consumer不会读取到同一个消息，依靠groud.id设置组名
      group-id: spring-kafka-consumer-02
      # 如果该消费者的偏移量不存在，则自动设置为最早的偏移量，smallest和largest才有效，如果smallest重新0开始读取，如果是largest从logfile的offset读取。一般情况下我们都是设置smallest
      auto-offset-reset: earliest
      # enable.auto.commit:true --> 设置自动提交offset
      enable-auto-commit: true
      #如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。
      auto-commit-interval: 1000
      # 指定消息key和消息体的序列化编解码方式
      key-deserializer: org.apache.kafka.common.serialization.IntegerDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

#mybatis-plus\u914D\u7F6E
mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.mzl.dubbocommon.entity
  type-enums-package: com.mzl.dubbocommon.enums
  # MyBatis \u539F\u751F\u652F\u6301\u7684\u914D\u7F6E
  configuration:
    # \u662F\u5426\u5F00\u542F\u81EA\u52A8\u9A7C\u5CF0\u547D\u540D\u89C4\u5219\uFF08camel case\uFF09\u6620\u5C04
    mapUnderscoreToCamelCase: true
    # \u5728\u63A7\u5236\u53F0\u6253\u5370SQL\u547D\u4EE4\u5E76\u6253\u5370\u6267\u884C\u7ED3\u679C
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # \u5728\u63A7\u5236\u53F0\u6253\u5370SQL\u547D\u4EE4\u4E0D\u6253\u5370\u7ED3\u679C
#    log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl
  # \u5168\u5C40\u7B56\u7565\u914D\u7F6E
  global-config:
    db-config:
      logic-delete-field: deleted  # \u5168\u5C40\u903B\u8F91\u5220\u9664\u7684\u5B9E\u4F53\u5B57\u6BB5\u540D(since 3.3.0,\u914D\u7F6E\u540E\u53EF\u4EE5\u5FFD\u7565\u4E0D\u914D\u7F6E\u6B65\u9AA42)
      logic-delete-value: 0 # \u903B\u8F91\u5DF2\u5220\u9664\u503C(\u9ED8\u8BA4\u4E3A 1)
      logic-not-delete-value: 1 # \u903B\u8F91\u672A\u5220\u9664\u503C(\u9ED8\u8BA4\u4E3A 0)
      #\u67E5\u8BE2\u65F6\u4E0D\u7528\u5224\u7A7A
      select-strategy: not_empty